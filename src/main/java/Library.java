import domain.Bid;
import domain.Item;
import domain.ItemBidSummary;
import domain.Member;

import javax.persistence.*;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'hello' at '9/3/16 7:01 PM' with Gradle 2.10
 *
 * @author hello, @date 9/3/16 7:01 PM
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("jpabook");
        EntityManager em = emf.createEntityManager();
        EntityTransaction tx = em.getTransaction();

        try {
            tx.begin();

            // your jpa code goes here

            tx.commit();
        } catch (Exception e) {
            if (tx.isActive()) {
                tx.rollback();
            }
            e.printStackTrace();
        }

        em.close();
        emf.close();


    }

    private static void saveMemberWithIdOne(EntityManager em) {
        Member member = new Member();
        member.setAge(15);
        member.setId("1");
        member.setUsername("gtchoi");

        em.persist(member);
    }

    private static void itemSeller(EntityManager em) {

        Item item = em.find(Item.class, 1L);
        System.out.println("hello");

    }

    /**
     * N + 1 query는 발생하지 않는다.
     * @param em
     */
    private static void itemBids(EntityManager em) {
        Item item = em.find(Item.class, 1L);

        for (Bid bid : item.getBids()) {
            System.out.println("bid id : " + bid.getBidder());
        }
    }

    private static void itemBidsSummary(EntityManager em) {
        ItemBidSummary itemBidSummary = em.find(ItemBidSummary.class, 1);

        System.out.println("item id : " + itemBidSummary.getItemId());
        System.out.println("item name : " + itemBidSummary.getName());
        System.out.println("the number of bids : " + itemBidSummary.getNumberOfBids());

    }

    private static void criteriaFirst(EntityManager em) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery criteria = cb.createQuery();
        criteria.select(criteria.from(Item.class));

        Query query = em.createQuery(criteria);
        Item item = (Item)query.getSingleResult();
        System.out.println(item);
    }

}
